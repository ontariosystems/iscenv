// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v1/resources/bidding_strategy.proto

package resources

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	common "google.golang.org/genproto/googleapis/ads/googleads/v1/common"
	enums "google.golang.org/genproto/googleapis/ads/googleads/v1/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A bidding strategy.
type BiddingStrategy struct {
	// Immutable. The resource name of the bidding strategy.
	// Bidding strategy resource names have the form:
	//
	// `customers/{customer_id}/biddingStrategies/{bidding_strategy_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The ID of the bidding strategy.
	Id *wrappers.Int64Value `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the bidding strategy.
	// All bidding strategies within an account must be named distinctly.
	//
	// The length of this string should be between 1 and 255, inclusive,
	// in UTF-8 bytes, (trimmed).
	Name *wrappers.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The status of the bidding strategy.
	//
	// This field is read-only.
	Status enums.BiddingStrategyStatusEnum_BiddingStrategyStatus `protobuf:"varint,15,opt,name=status,proto3,enum=google.ads.googleads.v1.enums.BiddingStrategyStatusEnum_BiddingStrategyStatus" json:"status,omitempty"`
	// Output only. The type of the bidding strategy.
	// Create a bidding strategy by setting the bidding scheme.
	//
	// This field is read-only.
	Type enums.BiddingStrategyTypeEnum_BiddingStrategyType `protobuf:"varint,5,opt,name=type,proto3,enum=google.ads.googleads.v1.enums.BiddingStrategyTypeEnum_BiddingStrategyType" json:"type,omitempty"`
	// Output only. The number of campaigns attached to this bidding strategy.
	//
	// This field is read-only.
	CampaignCount *wrappers.Int64Value `protobuf:"bytes,13,opt,name=campaign_count,json=campaignCount,proto3" json:"campaign_count,omitempty"`
	// Output only. The number of non-removed campaigns attached to this bidding strategy.
	//
	// This field is read-only.
	NonRemovedCampaignCount *wrappers.Int64Value `protobuf:"bytes,14,opt,name=non_removed_campaign_count,json=nonRemovedCampaignCount,proto3" json:"non_removed_campaign_count,omitempty"`
	// The bidding scheme.
	//
	// Only one can be set.
	//
	// Types that are valid to be assigned to Scheme:
	//	*BiddingStrategy_EnhancedCpc
	//	*BiddingStrategy_PageOnePromoted
	//	*BiddingStrategy_TargetCpa
	//	*BiddingStrategy_TargetImpressionShare
	//	*BiddingStrategy_TargetOutrankShare
	//	*BiddingStrategy_TargetRoas
	//	*BiddingStrategy_TargetSpend
	Scheme               isBiddingStrategy_Scheme `protobuf_oneof:"scheme"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BiddingStrategy) Reset()         { *m = BiddingStrategy{} }
func (m *BiddingStrategy) String() string { return proto.CompactTextString(m) }
func (*BiddingStrategy) ProtoMessage()    {}
func (*BiddingStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_45db3d8386a3943d, []int{0}
}

func (m *BiddingStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BiddingStrategy.Unmarshal(m, b)
}
func (m *BiddingStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BiddingStrategy.Marshal(b, m, deterministic)
}
func (m *BiddingStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BiddingStrategy.Merge(m, src)
}
func (m *BiddingStrategy) XXX_Size() int {
	return xxx_messageInfo_BiddingStrategy.Size(m)
}
func (m *BiddingStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_BiddingStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_BiddingStrategy proto.InternalMessageInfo

func (m *BiddingStrategy) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *BiddingStrategy) GetId() *wrappers.Int64Value {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BiddingStrategy) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *BiddingStrategy) GetStatus() enums.BiddingStrategyStatusEnum_BiddingStrategyStatus {
	if m != nil {
		return m.Status
	}
	return enums.BiddingStrategyStatusEnum_UNSPECIFIED
}

func (m *BiddingStrategy) GetType() enums.BiddingStrategyTypeEnum_BiddingStrategyType {
	if m != nil {
		return m.Type
	}
	return enums.BiddingStrategyTypeEnum_UNSPECIFIED
}

func (m *BiddingStrategy) GetCampaignCount() *wrappers.Int64Value {
	if m != nil {
		return m.CampaignCount
	}
	return nil
}

func (m *BiddingStrategy) GetNonRemovedCampaignCount() *wrappers.Int64Value {
	if m != nil {
		return m.NonRemovedCampaignCount
	}
	return nil
}

type isBiddingStrategy_Scheme interface {
	isBiddingStrategy_Scheme()
}

type BiddingStrategy_EnhancedCpc struct {
	EnhancedCpc *common.EnhancedCpc `protobuf:"bytes,7,opt,name=enhanced_cpc,json=enhancedCpc,proto3,oneof"`
}

type BiddingStrategy_PageOnePromoted struct {
	PageOnePromoted *common.PageOnePromoted `protobuf:"bytes,8,opt,name=page_one_promoted,json=pageOnePromoted,proto3,oneof"`
}

type BiddingStrategy_TargetCpa struct {
	TargetCpa *common.TargetCpa `protobuf:"bytes,9,opt,name=target_cpa,json=targetCpa,proto3,oneof"`
}

type BiddingStrategy_TargetImpressionShare struct {
	TargetImpressionShare *common.TargetImpressionShare `protobuf:"bytes,48,opt,name=target_impression_share,json=targetImpressionShare,proto3,oneof"`
}

type BiddingStrategy_TargetOutrankShare struct {
	TargetOutrankShare *common.TargetOutrankShare `protobuf:"bytes,10,opt,name=target_outrank_share,json=targetOutrankShare,proto3,oneof"`
}

type BiddingStrategy_TargetRoas struct {
	TargetRoas *common.TargetRoas `protobuf:"bytes,11,opt,name=target_roas,json=targetRoas,proto3,oneof"`
}

type BiddingStrategy_TargetSpend struct {
	TargetSpend *common.TargetSpend `protobuf:"bytes,12,opt,name=target_spend,json=targetSpend,proto3,oneof"`
}

func (*BiddingStrategy_EnhancedCpc) isBiddingStrategy_Scheme() {}

func (*BiddingStrategy_PageOnePromoted) isBiddingStrategy_Scheme() {}

func (*BiddingStrategy_TargetCpa) isBiddingStrategy_Scheme() {}

func (*BiddingStrategy_TargetImpressionShare) isBiddingStrategy_Scheme() {}

func (*BiddingStrategy_TargetOutrankShare) isBiddingStrategy_Scheme() {}

func (*BiddingStrategy_TargetRoas) isBiddingStrategy_Scheme() {}

func (*BiddingStrategy_TargetSpend) isBiddingStrategy_Scheme() {}

func (m *BiddingStrategy) GetScheme() isBiddingStrategy_Scheme {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *BiddingStrategy) GetEnhancedCpc() *common.EnhancedCpc {
	if x, ok := m.GetScheme().(*BiddingStrategy_EnhancedCpc); ok {
		return x.EnhancedCpc
	}
	return nil
}

func (m *BiddingStrategy) GetPageOnePromoted() *common.PageOnePromoted {
	if x, ok := m.GetScheme().(*BiddingStrategy_PageOnePromoted); ok {
		return x.PageOnePromoted
	}
	return nil
}

func (m *BiddingStrategy) GetTargetCpa() *common.TargetCpa {
	if x, ok := m.GetScheme().(*BiddingStrategy_TargetCpa); ok {
		return x.TargetCpa
	}
	return nil
}

func (m *BiddingStrategy) GetTargetImpressionShare() *common.TargetImpressionShare {
	if x, ok := m.GetScheme().(*BiddingStrategy_TargetImpressionShare); ok {
		return x.TargetImpressionShare
	}
	return nil
}

func (m *BiddingStrategy) GetTargetOutrankShare() *common.TargetOutrankShare {
	if x, ok := m.GetScheme().(*BiddingStrategy_TargetOutrankShare); ok {
		return x.TargetOutrankShare
	}
	return nil
}

func (m *BiddingStrategy) GetTargetRoas() *common.TargetRoas {
	if x, ok := m.GetScheme().(*BiddingStrategy_TargetRoas); ok {
		return x.TargetRoas
	}
	return nil
}

func (m *BiddingStrategy) GetTargetSpend() *common.TargetSpend {
	if x, ok := m.GetScheme().(*BiddingStrategy_TargetSpend); ok {
		return x.TargetSpend
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BiddingStrategy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BiddingStrategy_EnhancedCpc)(nil),
		(*BiddingStrategy_PageOnePromoted)(nil),
		(*BiddingStrategy_TargetCpa)(nil),
		(*BiddingStrategy_TargetImpressionShare)(nil),
		(*BiddingStrategy_TargetOutrankShare)(nil),
		(*BiddingStrategy_TargetRoas)(nil),
		(*BiddingStrategy_TargetSpend)(nil),
	}
}

func init() {
	proto.RegisterType((*BiddingStrategy)(nil), "google.ads.googleads.v1.resources.BiddingStrategy")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v1/resources/bidding_strategy.proto", fileDescriptor_45db3d8386a3943d)
}

var fileDescriptor_45db3d8386a3943d = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcb, 0x6e, 0xe3, 0x36,
	0x14, 0x86, 0x7d, 0xc9, 0xa4, 0x13, 0x3a, 0x17, 0x54, 0x98, 0x62, 0xd4, 0x74, 0xd0, 0x66, 0x0a,
	0x0c, 0xe0, 0x4e, 0x0b, 0xc9, 0x4e, 0x2f, 0xe8, 0x68, 0x56, 0xb2, 0x31, 0x88, 0x27, 0x40, 0x13,
	0x43, 0x4e, 0xbd, 0x28, 0x1c, 0x08, 0xb4, 0x74, 0x22, 0x0b, 0xb1, 0x48, 0x82, 0xa4, 0x5c, 0x04,
	0x41, 0x16, 0x7d, 0x95, 0x2e, 0xbb, 0xeb, 0x6b, 0xf4, 0x29, 0xb2, 0xce, 0x23, 0x74, 0x55, 0x88,
	0xa2, 0xe4, 0xc4, 0x89, 0x1b, 0x67, 0x77, 0xa8, 0xf3, 0xff, 0xdf, 0x7f, 0x44, 0x51, 0x12, 0xfa,
	0x39, 0xa2, 0x34, 0x9a, 0x82, 0x8d, 0x43, 0x61, 0xe7, 0x65, 0x56, 0xcd, 0xda, 0x36, 0x07, 0x41,
	0x53, 0x1e, 0x80, 0xb0, 0xc7, 0x71, 0x18, 0xc6, 0x24, 0xf2, 0x85, 0xe4, 0x58, 0x42, 0x74, 0x61,
	0x31, 0x4e, 0x25, 0x35, 0x5e, 0xe7, 0x72, 0x0b, 0x87, 0xc2, 0x2a, 0x9d, 0xd6, 0xac, 0x6d, 0x95,
	0xce, 0xdd, 0xef, 0x96, 0xc1, 0x03, 0x9a, 0x24, 0x94, 0x14, 0xe4, 0x1c, 0xb8, 0xfb, 0x7e, 0x99,
	0x1a, 0x48, 0x9a, 0xdc, 0x1f, 0xc3, 0x17, 0x12, 0xcb, 0x54, 0x68, 0xf3, 0xbb, 0x27, 0x9a, 0xe5,
	0x05, 0x03, 0x6d, 0xfd, 0xaa, 0xb0, 0xb2, 0xd8, 0x3e, 0x8b, 0x61, 0x1a, 0xfa, 0x63, 0x98, 0xe0,
	0x59, 0x4c, 0xb9, 0x16, 0x7c, 0x7e, 0x4b, 0x50, 0xdc, 0x9c, 0x6e, 0x7d, 0xa9, 0x5b, 0x6a, 0x35,
	0x4e, 0xcf, 0xec, 0xdf, 0x39, 0x66, 0x0c, 0x78, 0x31, 0xd6, 0xab, 0x5b, 0x56, 0x4c, 0x08, 0x95,
	0x58, 0xc6, 0x94, 0xe8, 0xee, 0xd7, 0x7f, 0x23, 0xb4, 0xd3, 0xc9, 0x27, 0x1b, 0xe8, 0xc1, 0x8c,
	0x5f, 0xd1, 0x56, 0x91, 0xe1, 0x13, 0x9c, 0x80, 0x59, 0xdd, 0xab, 0x36, 0x37, 0x3a, 0xad, 0x6b,
	0xf7, 0xd9, 0xbf, 0xee, 0x5b, 0xd4, 0x9c, 0x6f, 0xb5, 0xae, 0x58, 0x2c, 0xac, 0x80, 0x26, 0xf6,
	0x02, 0xc8, 0xdb, 0x2c, 0x30, 0x47, 0x38, 0x01, 0xa3, 0x85, 0x6a, 0x71, 0x68, 0xd6, 0xf7, 0xaa,
	0xcd, 0xc6, 0xfe, 0x17, 0xda, 0x6a, 0x15, 0x53, 0x5b, 0x1f, 0x89, 0xfc, 0xe9, 0x87, 0x21, 0x9e,
	0xa6, 0xd0, 0xa9, 0x5f, 0xbb, 0x75, 0xaf, 0x16, 0x87, 0x46, 0x0b, 0xad, 0xa9, 0xfc, 0x35, 0xe5,
	0x79, 0x75, 0xcf, 0x33, 0x90, 0x3c, 0x26, 0x91, 0x32, 0x79, 0x4a, 0x69, 0x9c, 0xa3, 0xf5, 0xfc,
	0x99, 0x98, 0x3b, 0x7b, 0xd5, 0xe6, 0xf6, 0xfe, 0x91, 0xb5, 0xec, 0x88, 0xa8, 0x87, 0x62, 0x2d,
	0x4c, 0x3c, 0x50, 0xde, 0x0f, 0x24, 0x4d, 0x1e, 0xee, 0xe4, 0xa3, 0xe9, 0x08, 0x23, 0x40, 0x6b,
	0xd9, 0x33, 0x34, 0x9f, 0xa9, 0xa8, 0xc3, 0xa7, 0x45, 0x9d, 0x5c, 0x30, 0x78, 0x28, 0x28, 0xbb,
	0x9e, 0xc7, 0x28, 0xb8, 0x71, 0x80, 0xb6, 0x03, 0x9c, 0x30, 0x1c, 0x47, 0xc4, 0x0f, 0x68, 0x4a,
	0xa4, 0xb9, 0xb5, 0xe2, 0x0e, 0x6e, 0x15, 0xbe, 0x6e, 0x66, 0x33, 0x4e, 0xd1, 0x2e, 0xa1, 0xc4,
	0xe7, 0x90, 0xd0, 0x19, 0x84, 0xfe, 0x02, 0x74, 0x7b, 0x45, 0xe8, 0x4b, 0x42, 0x89, 0x97, 0x23,
	0xba, 0x77, 0xf0, 0x7d, 0xb4, 0x09, 0x64, 0x82, 0x49, 0x90, 0xb1, 0x59, 0x60, 0x7e, 0xa2, 0x80,
	0xdf, 0x2e, 0xdd, 0x94, 0xfc, 0xfd, 0xb3, 0x3e, 0x68, 0x4f, 0x97, 0x05, 0xbd, 0x8a, 0xd7, 0x80,
	0xf9, 0xd2, 0x38, 0x45, 0x9f, 0x32, 0x1c, 0x81, 0x4f, 0x09, 0xf8, 0x8c, 0xd3, 0x84, 0x4a, 0x08,
	0xcd, 0xe7, 0x0a, 0x6b, 0x3f, 0x86, 0xed, 0xe3, 0x08, 0x8e, 0x09, 0xf4, 0xb5, 0xad, 0x57, 0xf1,
	0x76, 0xd8, 0xdd, 0x4b, 0xc6, 0x21, 0x42, 0x12, 0xf3, 0x08, 0xa4, 0x1f, 0x30, 0x6c, 0x6e, 0x28,
	0xee, 0x37, 0x8f, 0x71, 0x4f, 0x94, 0xa3, 0xcb, 0x70, 0xaf, 0xe2, 0x6d, 0xc8, 0x62, 0x61, 0x50,
	0xf4, 0x52, 0xb3, 0xe2, 0x84, 0x71, 0x10, 0x22, 0xa6, 0xc4, 0x17, 0x13, 0xcc, 0xc1, 0x6c, 0x29,
	0xf0, 0x8f, 0xab, 0x81, 0x3f, 0x96, 0xee, 0x41, 0x66, 0xee, 0x55, 0xbc, 0xcf, 0xe4, 0x43, 0x0d,
	0xe3, 0x0c, 0xbd, 0xd0, 0x81, 0x34, 0x95, 0x1c, 0x93, 0x73, 0x9d, 0x86, 0x54, 0xda, 0xfe, 0x6a,
	0x69, 0xc7, 0xb9, 0xb5, 0x88, 0x32, 0xe4, 0xbd, 0xab, 0xc6, 0x2f, 0xa8, 0xa1, 0x73, 0x38, 0xc5,
	0xc2, 0x6c, 0x28, 0xfc, 0xdb, 0xd5, 0xf0, 0x1e, 0xc5, 0xa2, 0x57, 0xf1, 0xf4, 0x2e, 0x67, 0xab,
	0xec, 0x90, 0x68, 0x9c, 0x60, 0x40, 0x42, 0x73, 0x73, 0xb5, 0x43, 0x92, 0xf3, 0x06, 0x99, 0x25,
	0x3b, 0x24, 0x72, 0xbe, 0x74, 0x26, 0x37, 0x2e, 0xac, 0xfe, 0x45, 0x32, 0xde, 0x05, 0xa9, 0x90,
	0x34, 0x01, 0x2e, 0xec, 0xcb, 0xa2, 0xbc, 0x2a, 0x3e, 0xcd, 0x5a, 0x15, 0x83, 0xb0, 0x2f, 0x17,
	0xbf, 0xd6, 0x57, 0x9d, 0xe7, 0x68, 0x5d, 0x04, 0x13, 0x48, 0xa0, 0xf3, 0x47, 0x0d, 0xbd, 0x09,
	0x68, 0x62, 0x3d, 0xfa, 0xf7, 0xe9, 0xbc, 0x58, 0xc8, 0xef, 0x67, 0xaf, 0x55, 0xbf, 0xfa, 0xdb,
	0xa1, 0xb6, 0x46, 0x74, 0x8a, 0x49, 0x64, 0x51, 0x1e, 0xd9, 0x11, 0x10, 0xf5, 0xd2, 0xd9, 0xf3,
	0x3b, 0xf8, 0x9f, 0x3f, 0xe2, 0xfb, 0xb2, 0xfa, 0xb3, 0x56, 0x3f, 0x70, 0xdd, 0xbf, 0x6a, 0xaf,
	0x0f, 0x72, 0xa4, 0x1b, 0x0a, 0x2b, 0x2f, 0xb3, 0x6a, 0xd8, 0xb6, 0xbc, 0x42, 0xf9, 0x4f, 0xa1,
	0x19, 0xb9, 0xa1, 0x18, 0x95, 0x9a, 0xd1, 0xb0, 0x3d, 0x2a, 0x35, 0x37, 0xb5, 0x37, 0x79, 0xc3,
	0x71, 0xdc, 0x50, 0x38, 0x4e, 0xa9, 0x72, 0x9c, 0x61, 0xdb, 0x71, 0x4a, 0xdd, 0x78, 0x5d, 0x0d,
	0xfb, 0xfd, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x80, 0xb6, 0x29, 0xbd, 0x07, 0x00, 0x00,
}
