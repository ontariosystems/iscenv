// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/gaming/v1beta/game_server_clusters_service.proto

package gaming

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("google/cloud/gaming/v1beta/game_server_clusters_service.proto", fileDescriptor_f79b7dff962b2466)
}

var fileDescriptor_f79b7dff962b2466 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x95, 0x0a, 0xed, 0x90, 0xdb, 0x02, 0xa2, 0xa2, 0xc0, 0x90, 0x8a, 0xc4, 0x21, 0x62,
	0xb1, 0x36, 0x84, 0x10, 0x43, 0x93, 0x48, 0x07, 0xda, 0x05, 0xb4, 0x3f, 0x05, 0x21, 0x76, 0xa9,
	0xbc, 0xf4, 0x25, 0x0d, 0x24, 0xb6, 0xb1, 0x9d, 0xf6, 0x30, 0x76, 0xe9, 0x57, 0xe0, 0xc0, 0x97,
	0xe0, 0x88, 0xb8, 0x21, 0xee, 0x3b, 0x8e, 0x5b, 0xb9, 0xc2, 0x07, 0xe0, 0x1b, 0xa0, 0x3a, 0xc9,
	0x1a, 0xb5, 0x4e, 0xda, 0xd2, 0x72, 0x8c, 0xed, 0xe7, 0x7d, 0xf3, 0xfc, 0xfc, 0xd8, 0xb2, 0xb9,
	0xed, 0x53, 0xea, 0x87, 0x80, 0xbc, 0x90, 0xc6, 0x6d, 0xe4, 0xe3, 0x28, 0x20, 0x3e, 0xea, 0x6e,
	0x1c, 0x83, 0xc4, 0xc3, 0x2f, 0x68, 0x09, 0xe0, 0x5d, 0xe0, 0x2d, 0x2f, 0x8c, 0x85, 0x04, 0x2e,
	0xd4, 0x77, 0xe0, 0x81, 0xc3, 0x38, 0x95, 0xd4, 0xaa, 0x25, 0x72, 0x47, 0xc9, 0x9d, 0x44, 0xee,
	0x24, 0xf2, 0xda, 0x8d, 0xb4, 0x34, 0x66, 0x01, 0xc2, 0x84, 0x50, 0x89, 0x65, 0x40, 0x89, 0x48,
	0x94, 0xb5, 0x6a, 0x6e, 0xd6, 0x0b, 0x03, 0x20, 0x32, 0x9d, 0xb8, 0x3f, 0xe7, 0x1f, 0xa5, 0xb2,
	0xdb, 0xa9, 0x2c, 0xa4, 0xc4, 0xe7, 0x31, 0x21, 0x43, 0x15, 0x65, 0xc0, 0xf3, 0x4d, 0x37, 0x7f,
	0xae, 0x9a, 0xd7, 0x76, 0x71, 0x04, 0x4d, 0x55, 0x62, 0x27, 0xad, 0xd0, 0x4c, 0x2c, 0x59, 0xbf,
	0x0d, 0xf3, 0xea, 0xb3, 0x40, 0xc8, 0xc9, 0x15, 0xd6, 0x43, 0xa7, 0xd8, 0xa8, 0xa3, 0xd7, 0x1c,
	0xc2, 0xfb, 0x18, 0x84, 0xac, 0x6d, 0xfd, 0x8b, 0x54, 0x30, 0x4a, 0x04, 0xd4, 0x5f, 0x0c, 0xdc,
	0x15, 0x86, 0x39, 0x10, 0xd9, 0xff, 0xf1, 0xeb, 0x63, 0xe5, 0xa9, 0xb5, 0x93, 0x91, 0x38, 0x49,
	0x86, 0xb7, 0x19, 0xa7, 0x6f, 0xc1, 0x93, 0x02, 0xd9, 0x28, 0xa4, 0x5e, 0x62, 0x16, 0xd9, 0x88,
	0x03, 0x0e, 0x23, 0x81, 0xec, 0x53, 0x85, 0x6c, 0xcc, 0xcc, 0xb9, 0x61, 0x5e, 0xd9, 0x85, 0xc9,
	0xbe, 0xd6, 0x83, 0xb2, 0x5f, 0xd5, 0x29, 0x32, 0x8f, 0xeb, 0xa5, 0xc2, 0x71, 0x55, 0xfd, 0x70,
	0xe0, 0x5e, 0x22, 0x38, 0x82, 0x09, 0x53, 0xc3, 0xc1, 0x69, 0x96, 0x34, 0x8e, 0x90, 0x7d, 0x6a,
	0x7d, 0xa9, 0x98, 0xd5, 0x1d, 0x0e, 0x58, 0xc2, 0xa4, 0xaf, 0xd2, 0x2d, 0x28, 0x10, 0x65, 0xd6,
	0x6e, 0x66, 0xda, 0x5c, 0xb0, 0x9c, 0xbd, 0x2c, 0x58, 0xf5, 0x6f, 0xc6, 0x99, 0x7b, 0xc7, 0x5c,
	0x9d, 0xec, 0xb9, 0x7a, 0xb1, 0xe6, 0x39, 0x48, 0xdc, 0xc6, 0x12, 0x0f, 0xdc, 0x8d, 0x64, 0xd3,
	0xee, 0x6a, 0x62, 0xac, 0x1b, 0x6b, 0x05, 0x6d, 0x45, 0xe8, 0xa8, 0xbe, 0x8c, 0x6d, 0xdf, 0xba,
	0xac, 0x69, 0x61, 0x7d, 0xaa, 0x98, 0x6b, 0xfb, 0x1c, 0xba, 0x01, 0xf4, 0x8a, 0xe8, 0xb9, 0x65,
	0xf4, 0xca, 0xb5, 0x19, 0xc4, 0xc6, 0x22, 0x25, 0xd2, 0xb3, 0x40, 0x14, 0x8b, 0x4e, 0xfd, 0x60,
	0x19, 0x2c, 0x58, 0xbe, 0xa7, 0x9e, 0xcc, 0x1f, 0xc3, 0xac, 0x3e, 0x81, 0x10, 0xe6, 0x0e, 0x54,
	0x81, 0x68, 0xc6, 0x40, 0x9d, 0xcc, 0x91, 0xa7, 0xdc, 0x21, 0xb2, 0x97, 0x72, 0x88, 0xfa, 0xa3,
	0x34, 0x14, 0x59, 0x9f, 0x25, 0x0d, 0x53, 0x08, 0x34, 0x16, 0x29, 0x91, 0xa6, 0xe1, 0xb5, 0xb2,
	0xdd, 0xb4, 0x0f, 0x96, 0x60, 0x3b, 0x4b, 0x43, 0xd2, 0xd3, 0xfa, 0x5a, 0x31, 0xab, 0x2f, 0x59,
	0x7b, 0xfe, 0x9b, 0xa4, 0x40, 0x34, 0xe3, 0xc6, 0x7f, 0x9f, 0xe7, 0x26, 0xb9, 0xa5, 0xbb, 0x42,
	0x62, 0xd5, 0xbf, 0x15, 0x61, 0xf1, 0x4e, 0xd1, 0x21, 0x9b, 0xaf, 0x2e, 0xe8, 0x68, 0xd6, 0x3b,
	0x0b, 0x10, 0xd3, 0x9e, 0x98, 0xcf, 0xa3, 0xf4, 0x14, 0xf1, 0x9b, 0x25, 0x3d, 0x53, 0x30, 0x36,
	0x16, 0x29, 0x91, 0xa6, 0xa7, 0x6f, 0x28, 0x40, 0x1f, 0x36, 0xe1, 0x7f, 0x01, 0x62, 0xf9, 0x1f,
	0xd1, 0xe2, 0xaa, 0xed, 0x9d, 0xb9, 0xd7, 0x87, 0xe3, 0xe9, 0x8b, 0x4a, 0xa4, 0xbe, 0x30, 0x0b,
	0x84, 0xe3, 0xd1, 0xe8, 0xdc, 0x75, 0x3a, 0x52, 0x32, 0xb1, 0x85, 0x50, 0xaf, 0xd7, 0x1b, 0x9b,
	0x44, 0x38, 0x96, 0x9d, 0xe4, 0x89, 0xb4, 0xce, 0x42, 0x2c, 0xdf, 0x50, 0x1e, 0x35, 0xda, 0xe6,
	0x9a, 0x47, 0xa3, 0x12, 0x3c, 0xfb, 0xc6, 0xd1, 0xe3, 0x74, 0xd6, 0xa7, 0x21, 0x26, 0xbe, 0x43,
	0xb9, 0x8f, 0x7c, 0x20, 0xea, 0x75, 0x84, 0x46, 0x2d, 0x74, 0x8f, 0xaf, 0x47, 0xc9, 0xd7, 0xf1,
	0x8a, 0x5a, 0x7c, 0xef, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0xb3, 0xee, 0x4b, 0x3a, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameServerClustersServiceClient is the client API for GameServerClustersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServerClustersServiceClient interface {
	// Lists Game Server Clusters in a given project and location.
	ListGameServerClusters(ctx context.Context, in *ListGameServerClustersRequest, opts ...grpc.CallOption) (*ListGameServerClustersResponse, error)
	// Gets details of a single game server cluster.
	GetGameServerCluster(ctx context.Context, in *GetGameServerClusterRequest, opts ...grpc.CallOption) (*GameServerCluster, error)
	// Creates a new game server cluster in a given project and location.
	CreateGameServerCluster(ctx context.Context, in *CreateGameServerClusterRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Previews creation of a new game server cluster in a given project and
	// location.
	PreviewCreateGameServerCluster(ctx context.Context, in *PreviewCreateGameServerClusterRequest, opts ...grpc.CallOption) (*PreviewCreateGameServerClusterResponse, error)
	// Deletes a single game server cluster.
	DeleteGameServerCluster(ctx context.Context, in *DeleteGameServerClusterRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Previews deletion of a single game server cluster.
	PreviewDeleteGameServerCluster(ctx context.Context, in *PreviewDeleteGameServerClusterRequest, opts ...grpc.CallOption) (*PreviewDeleteGameServerClusterResponse, error)
	// Patches a single game server cluster.
	UpdateGameServerCluster(ctx context.Context, in *UpdateGameServerClusterRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Previews updating a GameServerCluster.
	PreviewUpdateGameServerCluster(ctx context.Context, in *PreviewUpdateGameServerClusterRequest, opts ...grpc.CallOption) (*PreviewUpdateGameServerClusterResponse, error)
}

type gameServerClustersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerClustersServiceClient(cc grpc.ClientConnInterface) GameServerClustersServiceClient {
	return &gameServerClustersServiceClient{cc}
}

func (c *gameServerClustersServiceClient) ListGameServerClusters(ctx context.Context, in *ListGameServerClustersRequest, opts ...grpc.CallOption) (*ListGameServerClustersResponse, error) {
	out := new(ListGameServerClustersResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/ListGameServerClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClustersServiceClient) GetGameServerCluster(ctx context.Context, in *GetGameServerClusterRequest, opts ...grpc.CallOption) (*GameServerCluster, error) {
	out := new(GameServerCluster)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/GetGameServerCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClustersServiceClient) CreateGameServerCluster(ctx context.Context, in *CreateGameServerClusterRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/CreateGameServerCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClustersServiceClient) PreviewCreateGameServerCluster(ctx context.Context, in *PreviewCreateGameServerClusterRequest, opts ...grpc.CallOption) (*PreviewCreateGameServerClusterResponse, error) {
	out := new(PreviewCreateGameServerClusterResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/PreviewCreateGameServerCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClustersServiceClient) DeleteGameServerCluster(ctx context.Context, in *DeleteGameServerClusterRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/DeleteGameServerCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClustersServiceClient) PreviewDeleteGameServerCluster(ctx context.Context, in *PreviewDeleteGameServerClusterRequest, opts ...grpc.CallOption) (*PreviewDeleteGameServerClusterResponse, error) {
	out := new(PreviewDeleteGameServerClusterResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/PreviewDeleteGameServerCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClustersServiceClient) UpdateGameServerCluster(ctx context.Context, in *UpdateGameServerClusterRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/UpdateGameServerCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClustersServiceClient) PreviewUpdateGameServerCluster(ctx context.Context, in *PreviewUpdateGameServerClusterRequest, opts ...grpc.CallOption) (*PreviewUpdateGameServerClusterResponse, error) {
	out := new(PreviewUpdateGameServerClusterResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerClustersService/PreviewUpdateGameServerCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerClustersServiceServer is the server API for GameServerClustersService service.
type GameServerClustersServiceServer interface {
	// Lists Game Server Clusters in a given project and location.
	ListGameServerClusters(context.Context, *ListGameServerClustersRequest) (*ListGameServerClustersResponse, error)
	// Gets details of a single game server cluster.
	GetGameServerCluster(context.Context, *GetGameServerClusterRequest) (*GameServerCluster, error)
	// Creates a new game server cluster in a given project and location.
	CreateGameServerCluster(context.Context, *CreateGameServerClusterRequest) (*longrunning.Operation, error)
	// Previews creation of a new game server cluster in a given project and
	// location.
	PreviewCreateGameServerCluster(context.Context, *PreviewCreateGameServerClusterRequest) (*PreviewCreateGameServerClusterResponse, error)
	// Deletes a single game server cluster.
	DeleteGameServerCluster(context.Context, *DeleteGameServerClusterRequest) (*longrunning.Operation, error)
	// Previews deletion of a single game server cluster.
	PreviewDeleteGameServerCluster(context.Context, *PreviewDeleteGameServerClusterRequest) (*PreviewDeleteGameServerClusterResponse, error)
	// Patches a single game server cluster.
	UpdateGameServerCluster(context.Context, *UpdateGameServerClusterRequest) (*longrunning.Operation, error)
	// Previews updating a GameServerCluster.
	PreviewUpdateGameServerCluster(context.Context, *PreviewUpdateGameServerClusterRequest) (*PreviewUpdateGameServerClusterResponse, error)
}

// UnimplementedGameServerClustersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServerClustersServiceServer struct {
}

func (*UnimplementedGameServerClustersServiceServer) ListGameServerClusters(ctx context.Context, req *ListGameServerClustersRequest) (*ListGameServerClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameServerClusters not implemented")
}
func (*UnimplementedGameServerClustersServiceServer) GetGameServerCluster(ctx context.Context, req *GetGameServerClusterRequest) (*GameServerCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameServerCluster not implemented")
}
func (*UnimplementedGameServerClustersServiceServer) CreateGameServerCluster(ctx context.Context, req *CreateGameServerClusterRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameServerCluster not implemented")
}
func (*UnimplementedGameServerClustersServiceServer) PreviewCreateGameServerCluster(ctx context.Context, req *PreviewCreateGameServerClusterRequest) (*PreviewCreateGameServerClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreateGameServerCluster not implemented")
}
func (*UnimplementedGameServerClustersServiceServer) DeleteGameServerCluster(ctx context.Context, req *DeleteGameServerClusterRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameServerCluster not implemented")
}
func (*UnimplementedGameServerClustersServiceServer) PreviewDeleteGameServerCluster(ctx context.Context, req *PreviewDeleteGameServerClusterRequest) (*PreviewDeleteGameServerClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDeleteGameServerCluster not implemented")
}
func (*UnimplementedGameServerClustersServiceServer) UpdateGameServerCluster(ctx context.Context, req *UpdateGameServerClusterRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameServerCluster not implemented")
}
func (*UnimplementedGameServerClustersServiceServer) PreviewUpdateGameServerCluster(ctx context.Context, req *PreviewUpdateGameServerClusterRequest) (*PreviewUpdateGameServerClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdateGameServerCluster not implemented")
}

func RegisterGameServerClustersServiceServer(s *grpc.Server, srv GameServerClustersServiceServer) {
	s.RegisterService(&_GameServerClustersService_serviceDesc, srv)
}

func _GameServerClustersService_ListGameServerClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameServerClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).ListGameServerClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/ListGameServerClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).ListGameServerClusters(ctx, req.(*ListGameServerClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerClustersService_GetGameServerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameServerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).GetGameServerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/GetGameServerCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).GetGameServerCluster(ctx, req.(*GetGameServerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerClustersService_CreateGameServerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameServerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).CreateGameServerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/CreateGameServerCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).CreateGameServerCluster(ctx, req.(*CreateGameServerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerClustersService_PreviewCreateGameServerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewCreateGameServerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).PreviewCreateGameServerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/PreviewCreateGameServerCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).PreviewCreateGameServerCluster(ctx, req.(*PreviewCreateGameServerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerClustersService_DeleteGameServerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameServerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).DeleteGameServerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/DeleteGameServerCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).DeleteGameServerCluster(ctx, req.(*DeleteGameServerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerClustersService_PreviewDeleteGameServerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewDeleteGameServerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).PreviewDeleteGameServerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/PreviewDeleteGameServerCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).PreviewDeleteGameServerCluster(ctx, req.(*PreviewDeleteGameServerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerClustersService_UpdateGameServerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameServerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).UpdateGameServerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/UpdateGameServerCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).UpdateGameServerCluster(ctx, req.(*UpdateGameServerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerClustersService_PreviewUpdateGameServerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewUpdateGameServerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerClustersServiceServer).PreviewUpdateGameServerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerClustersService/PreviewUpdateGameServerCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerClustersServiceServer).PreviewUpdateGameServerCluster(ctx, req.(*PreviewUpdateGameServerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameServerClustersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.gaming.v1beta.GameServerClustersService",
	HandlerType: (*GameServerClustersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGameServerClusters",
			Handler:    _GameServerClustersService_ListGameServerClusters_Handler,
		},
		{
			MethodName: "GetGameServerCluster",
			Handler:    _GameServerClustersService_GetGameServerCluster_Handler,
		},
		{
			MethodName: "CreateGameServerCluster",
			Handler:    _GameServerClustersService_CreateGameServerCluster_Handler,
		},
		{
			MethodName: "PreviewCreateGameServerCluster",
			Handler:    _GameServerClustersService_PreviewCreateGameServerCluster_Handler,
		},
		{
			MethodName: "DeleteGameServerCluster",
			Handler:    _GameServerClustersService_DeleteGameServerCluster_Handler,
		},
		{
			MethodName: "PreviewDeleteGameServerCluster",
			Handler:    _GameServerClustersService_PreviewDeleteGameServerCluster_Handler,
		},
		{
			MethodName: "UpdateGameServerCluster",
			Handler:    _GameServerClustersService_UpdateGameServerCluster_Handler,
		},
		{
			MethodName: "PreviewUpdateGameServerCluster",
			Handler:    _GameServerClustersService_PreviewUpdateGameServerCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/gaming/v1beta/game_server_clusters_service.proto",
}
