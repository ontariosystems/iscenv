// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/gaming/v1beta/game_server_deployments_service.proto

package gaming

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("google/cloud/gaming/v1beta/game_server_deployments_service.proto", fileDescriptor_ddfdf81c8b5915df)
}

var fileDescriptor_ddfdf81c8b5915df = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x95, 0x0a, 0x0d, 0xc9, 0x37, 0xb2, 0x89, 0x89, 0xb0, 0x4d, 0x22, 0x9c, 0xa8, 0x86,
	0x0d, 0xe5, 0xc0, 0x54, 0x98, 0x20, 0xb0, 0x3f, 0x97, 0x8d, 0x4d, 0xfb, 0x23, 0x10, 0x12, 0x1a,
	0x5e, 0xfa, 0x2e, 0x0b, 0x24, 0x76, 0x88, 0xdd, 0x15, 0x84, 0x76, 0xe1, 0x2b, 0x70, 0xe4, 0xc2,
	0x09, 0x09, 0xf1, 0x2d, 0x40, 0x5c, 0x76, 0x04, 0x71, 0xd9, 0x99, 0xc3, 0xce, 0x88, 0x0f, 0x80,
	0x1a, 0x3b, 0x6b, 0xa1, 0x4e, 0xb6, 0xb6, 0x1c, 0x6b, 0xfb, 0xf7, 0xda, 0xcf, 0xe3, 0xa7, 0xce,
	0x8b, 0xee, 0x06, 0x9c, 0x07, 0x11, 0x10, 0x3f, 0xe2, 0xcd, 0x06, 0x09, 0x68, 0x1c, 0xb2, 0x80,
	0xec, 0x5d, 0xdf, 0x06, 0x49, 0xdb, 0xbf, 0x60, 0x4b, 0x40, 0xba, 0x07, 0xe9, 0x56, 0x03, 0x92,
	0x88, 0xbf, 0x8a, 0x81, 0x49, 0x91, 0x0d, 0x85, 0x3e, 0xe0, 0x24, 0xe5, 0x92, 0xdb, 0x8e, 0xaa,
	0x80, 0xb3, 0x0a, 0x58, 0x55, 0xc0, 0xaa, 0x82, 0x33, 0xa1, 0xab, 0xd3, 0x24, 0x24, 0x94, 0x31,
	0x2e, 0xa9, 0x0c, 0x39, 0x13, 0x8a, 0x74, 0xc6, 0xbb, 0x66, 0xfd, 0x28, 0x04, 0x26, 0xf5, 0xc4,
	0x4c, 0xff, 0x87, 0xd2, 0xe4, 0x65, 0x4d, 0x46, 0x9c, 0x05, 0x69, 0x93, 0xb1, 0x36, 0xc8, 0x13,
	0x48, 0xbb, 0xf7, 0xad, 0x7d, 0x19, 0x45, 0x13, 0x8b, 0x34, 0x86, 0xf5, 0xac, 0xca, 0x5c, 0xa7,
	0xc8, 0xba, 0x12, 0x66, 0x1f, 0x59, 0xe8, 0xc2, 0x52, 0x28, 0xa4, 0x71, 0x91, 0x7d, 0x1b, 0x17,
	0x2b, 0xc6, 0x85, 0xd8, 0x1a, 0xbc, 0x68, 0x82, 0x90, 0xce, 0xec, 0x80, 0xb4, 0x48, 0x38, 0x13,
	0xe0, 0x3e, 0x38, 0xf4, 0x46, 0x12, 0x9a, 0x02, 0x93, 0x6f, 0xbe, 0xff, 0x7c, 0x5b, 0xb9, 0x63,
	0xcf, 0xe6, 0xc6, 0xbc, 0x56, 0xc3, 0xb3, 0x49, 0xca, 0x9f, 0x81, 0x2f, 0x05, 0xa9, 0x92, 0x88,
	0xfb, 0x4a, 0x38, 0xa9, 0xee, 0x67, 0xc6, 0xf5, 0x8a, 0xf9, 0x61, 0xa1, 0xf1, 0x45, 0x30, 0x6e,
	0x6a, 0xd7, 0xcb, 0x8e, 0x5a, 0x00, 0xe5, 0x32, 0xaf, 0x95, 0xb2, 0x06, 0xd0, 0x5d, 0x3a, 0xf4,
	0xce, 0x30, 0x1a, 0x43, 0x8f, 0xae, 0xf6, 0x60, 0x81, 0x2a, 0xb3, 0x28, 0x52, 0xdd, 0xb7, 0x3f,
	0x54, 0x90, 0x73, 0x3f, 0x05, 0x2a, 0xc1, 0x28, 0xad, 0xf4, 0x16, 0x8a, 0xb9, 0x5c, 0xdd, 0x64,
	0x8e, 0x77, 0xe5, 0x0c, 0xaf, 0xe4, 0x39, 0x73, 0x3f, 0x5a, 0x07, 0xde, 0x15, 0x34, 0x66, 0xdc,
	0xf9, 0xdc, 0xf1, 0xb2, 0x65, 0x90, 0xb4, 0x41, 0x25, 0x3d, 0xf4, 0x26, 0xd5, 0xd5, 0x4d, 0x9b,
	0xb3, 0x9d, 0x19, 0xf2, 0xd0, 0x1d, 0xee, 0xa2, 0xeb, 0xe7, 0xcd, 0xc5, 0xed, 0xdf, 0x16, 0x72,
	0xe6, 0x20, 0x82, 0x41, 0x8c, 0x2a, 0xe6, 0x4e, 0x69, 0xd4, 0xcb, 0xfe, 0x7c, 0xea, 0xca, 0x47,
	0x75, 0xc8, 0x7c, 0x7c, 0xae, 0x20, 0x67, 0x33, 0x69, 0x0c, 0x94, 0x8f, 0x62, 0xee, 0x94, 0xb2,
	0xbf, 0xf6, 0x99, 0x0f, 0xd7, 0x7c, 0x77, 0xd3, 0xcd, 0xec, 0x20, 0x5b, 0x31, 0x15, 0xcf, 0x33,
	0x57, 0x58, 0x6d, 0xe3, 0xd8, 0x15, 0x33, 0x82, 0x07, 0x31, 0xab, 0x30, 0x3b, 0xbf, 0x2c, 0x34,
	0x55, 0xf4, 0x0e, 0xf0, 0x28, 0xe2, 0x4d, 0x69, 0x7b, 0x83, 0xbc, 0x21, 0x8a, 0xcd, 0xcd, 0xbc,
	0xd9, 0xef, 0x53, 0xa2, 0x79, 0x77, 0xa3, 0x3b, 0x31, 0x8b, 0xf6, 0xfc, 0x50, 0x89, 0x21, 0xa9,
	0x56, 0xf4, 0xa9, 0x82, 0x2e, 0x95, 0x24, 0x40, 0xaf, 0x9a, 0x1b, 0x30, 0x40, 0x7f, 0x4b, 0x3f,
	0x21, 0x47, 0xef, 0xfb, 0xcc, 0xd1, 0xa8, 0xd6, 0xd0, 0x13, 0x9c, 0x47, 0xb5, 0xe5, 0x63, 0x73,
	0xf4, 0x1a, 0x3c, 0x8c, 0x49, 0xf5, 0xb3, 0xb9, 0x5b, 0xef, 0x2a, 0xc8, 0x5d, 0x4d, 0x61, 0x2f,
	0x84, 0x56, 0x99, 0x5d, 0xf3, 0x65, 0x76, 0x9d, 0xcc, 0xe7, 0x7e, 0x2d, 0x0c, 0x5b, 0x46, 0x7f,
	0x65, 0x77, 0x32, 0x57, 0x9e, 0xd6, 0x36, 0xff, 0xaf, 0x2b, 0x89, 0x3a, 0x41, 0xc7, 0x9d, 0x23,
	0x0b, 0x8d, 0x2d, 0x80, 0xf4, 0x77, 0x3b, 0xc0, 0xba, 0xa4, 0x12, 0xec, 0xd2, 0xcc, 0x9b, 0x88,
	0xdc, 0x81, 0x99, 0xfe, 0x41, 0xad, 0xf9, 0x89, 0xfe, 0xce, 0xac, 0x0d, 0xf5, 0x37, 0xa9, 0xef,
	0x18, 0xf6, 0xa8, 0x5b, 0x55, 0x67, 0xe5, 0xc0, 0xbb, 0xd8, 0x86, 0x74, 0xf3, 0x28, 0xf4, 0x39,
	0x69, 0x12, 0x0a, 0xec, 0xf3, 0xf8, 0x9b, 0x87, 0x77, 0xa5, 0x4c, 0x44, 0x9d, 0x90, 0x56, 0xab,
	0xf5, 0xcf, 0x24, 0xa1, 0x4d, 0xb9, 0xab, 0xba, 0xc1, 0xab, 0x49, 0x44, 0xe5, 0x0e, 0x4f, 0xe3,
	0x7b, 0x0d, 0x34, 0xe5, 0xf3, 0xb8, 0x44, 0xee, 0xaa, 0xf5, 0x58, 0x77, 0xb7, 0x38, 0xe0, 0x11,
	0x65, 0x01, 0xe6, 0x69, 0x40, 0x02, 0x60, 0x59, 0x17, 0x48, 0x3a, 0x5b, 0x98, 0xfa, 0xcc, 0x5b,
	0xea, 0xd7, 0xf6, 0x48, 0xb6, 0xf8, 0xc6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x54, 0x67,
	0xfc, 0x28, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameServerDeploymentsServiceClient is the client API for GameServerDeploymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServerDeploymentsServiceClient interface {
	// Lists Game Server Deployments in a given project and Location.
	ListGameServerDeployments(ctx context.Context, in *ListGameServerDeploymentsRequest, opts ...grpc.CallOption) (*ListGameServerDeploymentsResponse, error)
	// Gets details of a single Game Server Deployment.
	GetGameServerDeployment(ctx context.Context, in *GetGameServerDeploymentRequest, opts ...grpc.CallOption) (*GameServerDeployment, error)
	// Creates a new Game Server Deployment in a given project and Location.
	CreateGameServerDeployment(ctx context.Context, in *CreateGameServerDeploymentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Deletes a single Game Server Deployment.
	DeleteGameServerDeployment(ctx context.Context, in *DeleteGameServerDeploymentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Patches a Game Server Deployment.
	UpdateGameServerDeployment(ctx context.Context, in *UpdateGameServerDeploymentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Gets details a single Game Server Deployment Rollout.
	GetGameServerDeploymentRollout(ctx context.Context, in *GetGameServerDeploymentRolloutRequest, opts ...grpc.CallOption) (*GameServerDeploymentRollout, error)
	// Patches a single Game Server Deployment Rollout.
	// The method will not return an error if the update does not affect any
	// existing realms. For example - if the default_game_server_config is changed
	// but all existing realms use the override, that is valid. Similarly, if a
	// non existing realm is explicitly called out in game_server_config_overrides
	// field, that will also not result in an error.
	UpdateGameServerDeploymentRollout(ctx context.Context, in *UpdateGameServerDeploymentRolloutRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Previews the Game Server Deployment Rollout. This API does not mutate the
	// Rollout resource.
	PreviewGameServerDeploymentRollout(ctx context.Context, in *PreviewGameServerDeploymentRolloutRequest, opts ...grpc.CallOption) (*PreviewGameServerDeploymentRolloutResponse, error)
	// Retrieves information about the current state of the Game Server
	// Ddeployment. Gathers all the Agones fleets and Agones autoscalers,
	// including fleets running an older version of the Game Server Deployment.
	FetchDeploymentState(ctx context.Context, in *FetchDeploymentStateRequest, opts ...grpc.CallOption) (*FetchDeploymentStateResponse, error)
}

type gameServerDeploymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerDeploymentsServiceClient(cc grpc.ClientConnInterface) GameServerDeploymentsServiceClient {
	return &gameServerDeploymentsServiceClient{cc}
}

func (c *gameServerDeploymentsServiceClient) ListGameServerDeployments(ctx context.Context, in *ListGameServerDeploymentsRequest, opts ...grpc.CallOption) (*ListGameServerDeploymentsResponse, error) {
	out := new(ListGameServerDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/ListGameServerDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) GetGameServerDeployment(ctx context.Context, in *GetGameServerDeploymentRequest, opts ...grpc.CallOption) (*GameServerDeployment, error) {
	out := new(GameServerDeployment)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/GetGameServerDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) CreateGameServerDeployment(ctx context.Context, in *CreateGameServerDeploymentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/CreateGameServerDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) DeleteGameServerDeployment(ctx context.Context, in *DeleteGameServerDeploymentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/DeleteGameServerDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) UpdateGameServerDeployment(ctx context.Context, in *UpdateGameServerDeploymentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/UpdateGameServerDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) GetGameServerDeploymentRollout(ctx context.Context, in *GetGameServerDeploymentRolloutRequest, opts ...grpc.CallOption) (*GameServerDeploymentRollout, error) {
	out := new(GameServerDeploymentRollout)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/GetGameServerDeploymentRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) UpdateGameServerDeploymentRollout(ctx context.Context, in *UpdateGameServerDeploymentRolloutRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/UpdateGameServerDeploymentRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) PreviewGameServerDeploymentRollout(ctx context.Context, in *PreviewGameServerDeploymentRolloutRequest, opts ...grpc.CallOption) (*PreviewGameServerDeploymentRolloutResponse, error) {
	out := new(PreviewGameServerDeploymentRolloutResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/PreviewGameServerDeploymentRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerDeploymentsServiceClient) FetchDeploymentState(ctx context.Context, in *FetchDeploymentStateRequest, opts ...grpc.CallOption) (*FetchDeploymentStateResponse, error) {
	out := new(FetchDeploymentStateResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.gaming.v1beta.GameServerDeploymentsService/FetchDeploymentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerDeploymentsServiceServer is the server API for GameServerDeploymentsService service.
type GameServerDeploymentsServiceServer interface {
	// Lists Game Server Deployments in a given project and Location.
	ListGameServerDeployments(context.Context, *ListGameServerDeploymentsRequest) (*ListGameServerDeploymentsResponse, error)
	// Gets details of a single Game Server Deployment.
	GetGameServerDeployment(context.Context, *GetGameServerDeploymentRequest) (*GameServerDeployment, error)
	// Creates a new Game Server Deployment in a given project and Location.
	CreateGameServerDeployment(context.Context, *CreateGameServerDeploymentRequest) (*longrunning.Operation, error)
	// Deletes a single Game Server Deployment.
	DeleteGameServerDeployment(context.Context, *DeleteGameServerDeploymentRequest) (*longrunning.Operation, error)
	// Patches a Game Server Deployment.
	UpdateGameServerDeployment(context.Context, *UpdateGameServerDeploymentRequest) (*longrunning.Operation, error)
	// Gets details a single Game Server Deployment Rollout.
	GetGameServerDeploymentRollout(context.Context, *GetGameServerDeploymentRolloutRequest) (*GameServerDeploymentRollout, error)
	// Patches a single Game Server Deployment Rollout.
	// The method will not return an error if the update does not affect any
	// existing realms. For example - if the default_game_server_config is changed
	// but all existing realms use the override, that is valid. Similarly, if a
	// non existing realm is explicitly called out in game_server_config_overrides
	// field, that will also not result in an error.
	UpdateGameServerDeploymentRollout(context.Context, *UpdateGameServerDeploymentRolloutRequest) (*longrunning.Operation, error)
	// Previews the Game Server Deployment Rollout. This API does not mutate the
	// Rollout resource.
	PreviewGameServerDeploymentRollout(context.Context, *PreviewGameServerDeploymentRolloutRequest) (*PreviewGameServerDeploymentRolloutResponse, error)
	// Retrieves information about the current state of the Game Server
	// Ddeployment. Gathers all the Agones fleets and Agones autoscalers,
	// including fleets running an older version of the Game Server Deployment.
	FetchDeploymentState(context.Context, *FetchDeploymentStateRequest) (*FetchDeploymentStateResponse, error)
}

// UnimplementedGameServerDeploymentsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServerDeploymentsServiceServer struct {
}

func (*UnimplementedGameServerDeploymentsServiceServer) ListGameServerDeployments(ctx context.Context, req *ListGameServerDeploymentsRequest) (*ListGameServerDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameServerDeployments not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) GetGameServerDeployment(ctx context.Context, req *GetGameServerDeploymentRequest) (*GameServerDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameServerDeployment not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) CreateGameServerDeployment(ctx context.Context, req *CreateGameServerDeploymentRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameServerDeployment not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) DeleteGameServerDeployment(ctx context.Context, req *DeleteGameServerDeploymentRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameServerDeployment not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) UpdateGameServerDeployment(ctx context.Context, req *UpdateGameServerDeploymentRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameServerDeployment not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) GetGameServerDeploymentRollout(ctx context.Context, req *GetGameServerDeploymentRolloutRequest) (*GameServerDeploymentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameServerDeploymentRollout not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) UpdateGameServerDeploymentRollout(ctx context.Context, req *UpdateGameServerDeploymentRolloutRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameServerDeploymentRollout not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) PreviewGameServerDeploymentRollout(ctx context.Context, req *PreviewGameServerDeploymentRolloutRequest) (*PreviewGameServerDeploymentRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewGameServerDeploymentRollout not implemented")
}
func (*UnimplementedGameServerDeploymentsServiceServer) FetchDeploymentState(ctx context.Context, req *FetchDeploymentStateRequest) (*FetchDeploymentStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDeploymentState not implemented")
}

func RegisterGameServerDeploymentsServiceServer(s *grpc.Server, srv GameServerDeploymentsServiceServer) {
	s.RegisterService(&_GameServerDeploymentsService_serviceDesc, srv)
}

func _GameServerDeploymentsService_ListGameServerDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameServerDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).ListGameServerDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/ListGameServerDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).ListGameServerDeployments(ctx, req.(*ListGameServerDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_GetGameServerDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameServerDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).GetGameServerDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/GetGameServerDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).GetGameServerDeployment(ctx, req.(*GetGameServerDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_CreateGameServerDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameServerDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).CreateGameServerDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/CreateGameServerDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).CreateGameServerDeployment(ctx, req.(*CreateGameServerDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_DeleteGameServerDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameServerDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).DeleteGameServerDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/DeleteGameServerDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).DeleteGameServerDeployment(ctx, req.(*DeleteGameServerDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_UpdateGameServerDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameServerDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).UpdateGameServerDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/UpdateGameServerDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).UpdateGameServerDeployment(ctx, req.(*UpdateGameServerDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_GetGameServerDeploymentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameServerDeploymentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).GetGameServerDeploymentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/GetGameServerDeploymentRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).GetGameServerDeploymentRollout(ctx, req.(*GetGameServerDeploymentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_UpdateGameServerDeploymentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameServerDeploymentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).UpdateGameServerDeploymentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/UpdateGameServerDeploymentRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).UpdateGameServerDeploymentRollout(ctx, req.(*UpdateGameServerDeploymentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_PreviewGameServerDeploymentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewGameServerDeploymentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).PreviewGameServerDeploymentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/PreviewGameServerDeploymentRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).PreviewGameServerDeploymentRollout(ctx, req.(*PreviewGameServerDeploymentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerDeploymentsService_FetchDeploymentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDeploymentStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerDeploymentsServiceServer).FetchDeploymentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.gaming.v1beta.GameServerDeploymentsService/FetchDeploymentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerDeploymentsServiceServer).FetchDeploymentState(ctx, req.(*FetchDeploymentStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameServerDeploymentsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.gaming.v1beta.GameServerDeploymentsService",
	HandlerType: (*GameServerDeploymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGameServerDeployments",
			Handler:    _GameServerDeploymentsService_ListGameServerDeployments_Handler,
		},
		{
			MethodName: "GetGameServerDeployment",
			Handler:    _GameServerDeploymentsService_GetGameServerDeployment_Handler,
		},
		{
			MethodName: "CreateGameServerDeployment",
			Handler:    _GameServerDeploymentsService_CreateGameServerDeployment_Handler,
		},
		{
			MethodName: "DeleteGameServerDeployment",
			Handler:    _GameServerDeploymentsService_DeleteGameServerDeployment_Handler,
		},
		{
			MethodName: "UpdateGameServerDeployment",
			Handler:    _GameServerDeploymentsService_UpdateGameServerDeployment_Handler,
		},
		{
			MethodName: "GetGameServerDeploymentRollout",
			Handler:    _GameServerDeploymentsService_GetGameServerDeploymentRollout_Handler,
		},
		{
			MethodName: "UpdateGameServerDeploymentRollout",
			Handler:    _GameServerDeploymentsService_UpdateGameServerDeploymentRollout_Handler,
		},
		{
			MethodName: "PreviewGameServerDeploymentRollout",
			Handler:    _GameServerDeploymentsService_PreviewGameServerDeploymentRollout_Handler,
		},
		{
			MethodName: "FetchDeploymentState",
			Handler:    _GameServerDeploymentsService_FetchDeploymentState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/gaming/v1beta/game_server_deployments_service.proto",
}
